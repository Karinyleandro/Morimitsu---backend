generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genero {
  M
  F
  OUTRO
}

enum TipoUsuario {
  PROFESSOR
  COORDENADOR
  ALUNO
}

enum CargoAluno {
  ALUNO
  ALUNO_PROFESSOR
}

model Usuario {
  id               Int           @id @default(autoincrement())
  tipo_usuario     TipoUsuario
  cargo_aluno      CargoAluno?
  nome             String
  nome_social      String?
  num_matricula    Int?          @unique
  cpf              String        @unique
  dataNascimento   DateTime
  telefone         String?
  endereco         String?
  grau             Int?
  email            String        @unique
  genero           Genero
  imagem_perfil_url String?
  ativo            Boolean       @default(true)
  ultimo_login     DateTime?
  passwordHash     String?       
  criado_em        DateTime      @default(now())
  atualizado_em    DateTime      @default(now())
  id_faixa         Int?
  faixa            Faixa?        @relation(fields: [id_faixa], references: [id])
  responsaveis     Responsavel[]
  aluno_turmas     Aluno_Turma[]
  frequencias      Frequencia[]  @relation("AlunoFrequencias")
  registradas      Frequencia[]  @relation("RegistradorFrequencias")
  graduacoes       Graduacao[]   @relation("UsuarioGraduacoes")
  graduacoesCoordenador Graduacao[] @relation("CoordenadorGraduacoes")
  turmasComoProfessor  Turma[]    @relation("ProfessorTurmas")
  turmasComoCoordenador Turma[]   @relation("CoordenadorTurmas")
  log_acoes        Log_Acao[]
  passwordResetTokens PasswordResetToken[]

}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
}

model RevokedToken {
  id        Int      @id @default(autoincrement())
  jti       String   @unique
  expiresAt DateTime
}

model Responsavel {
  id           Int     @id @default(autoincrement())
  nome         String
  telefone     String
  grau_parentesco String
  email        String
  id_usuario   Int
  usuario      Usuario @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
}

model Faixa {
  id           Int           @id @default(autoincrement())
  nome         String
  ordem        Int
  imagem_faixa_url String?
  requisitos   Requisito_Grau[]
  usuarios     Usuario[]
  graduacoes   Graduacao[]
}

model Requisito_Grau {
  id               Int     @id @default(autoincrement())
  faixa_id         Int
  faixa            Faixa   @relation(fields: [faixa_id], references: [id], onDelete: Cascade)
  grau             Int
  requisito_aulas  Int
  tempo_minimo_dias Int
  descricao        String?
}

model Turma {
  id               Int           @id @default(autoincrement())
  nome_turma       String
  data_criacao     DateTime      @default(now())
  faixa_etaria_min Int
  faixa_etaria_max Int
  total_aulas      Int
  id_professor     Int?
  id_coordenador   Int?
  professor        Usuario?      @relation("ProfessorTurmas", fields: [id_professor], references: [id])
  coordenador      Usuario?      @relation("CoordenadorTurmas", fields: [id_coordenador], references: [id])
  aluno_turmas     Aluno_Turma[]
  frequencias      Frequencia[]
  ativo            Boolean       @default(true)
}


model Aluno_Turma {
  id_usuario        Int
  id_turma          Int
  frequencia_acumulada Float? @default(0)
  ativo             Boolean   @default(true)
  usuario           Usuario   @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  turma             Turma     @relation(fields: [id_turma], references: [id], onDelete: Cascade)

  @@id([id_usuario, id_turma])
}

model Frequencia {
  id             Int       @id @default(autoincrement())
  id_turma       Int
  id_usuario     Int
  id_registrador Int
  data_aula      DateTime
  presente       Boolean
  criado_em      DateTime  @default(now())
  turma          Turma     @relation(fields: [id_turma], references: [id], onDelete: Cascade)
  usuario        Usuario   @relation("AlunoFrequencias", fields: [id_usuario], references: [id], onDelete: Cascade)
  registrador    Usuario   @relation("RegistradorFrequencias", fields: [id_registrador], references: [id])
}

model Graduacao {
  id              Int      @id @default(autoincrement())
  id_usuario      Int
  id_coordenador  Int
  faixa_id        Int
  grau            Int
  data_graduacao  DateTime
  observacao      String?
  usuario         Usuario  @relation("UsuarioGraduacoes", fields: [id_usuario], references: [id], onDelete: Cascade)
  coordenador     Usuario  @relation("CoordenadorGraduacoes", fields: [id_coordenador], references: [id])
  faixa           Faixa    @relation(fields: [faixa_id], references: [id])
}

model Log_Acao {
  id           Int      @id @default(autoincrement())
  usuario_id   Int?
  usuario      Usuario? @relation(fields: [usuario_id], references: [id], onDelete: SetNull)
  acao         String
  descricao    String?
  data_execucao DateTime @default(now())
}
